{"version":3,"sources":["Components/Megabox.js","Components/Header.js","Components/Home.js","App.js","serviceWorker.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["Megabox","showMega","className","Header","useState","showMegaVendor","setShowVendor","showMegaWedding","setShowWedding","isLogged","useSelector","state","dispatch","useDispatch","htmlFor","style","color","src","alt","type","name","id","display","href","onClick","e","prevState","placeholder","Button","fontSize","height","Home","App","Boolean","window","location","hostname","match","loggedReducer","action","allReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gcAsCeA,MAnCf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OACE,6BACE,yBAAKC,UAAS,oBAAeD,EAAW,aAAe,KACrD,yBAAKC,UAAU,WACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,eACZ,2CACA,2CACA,0CACA,2CAGJ,yBAAKA,UAAU,OACb,wBAAIA,UAAU,eACZ,yCACA,6CACA,sCACA,2CAGJ,yBAAKA,UAAU,OACb,wBAAIA,UAAU,eACZ,2CACA,2CACA,0CACA,+C,QCgGCC,MA/Gf,WAAmB,IAAD,EACwBC,oBAAS,GADjC,mBACTC,EADS,KACOC,EADP,OAE0BF,oBAAS,GAFnC,mBAETG,EAFS,KAEQC,EAFR,KAKVC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,YACtCG,EAAWC,cASjB,OACE,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,UACb,6BACE,2BAAOY,QAAQ,YAAYZ,UAAU,eACnC,kBAAC,IAAD,CAAaa,MAAO,CAAEC,MAAO,YAG/B,yBAAKd,UAAU,gBACb,yBACEe,IAAI,gFACJC,IAAI,WAMV,2BACEC,KAAK,QACLC,KAAK,QACLC,GAAG,WACHN,MAAO,CAAEO,QAAS,UAEpB,2BACEH,KAAK,QACLC,KAAK,QACLC,GAAG,YACHN,MAAO,CAAEO,QAAS,UAIpB,wBAAIpB,UAAU,sBACZ,2BAAOY,QAAQ,WAAWZ,UAAU,cAClC,kBAAC,IAAD,CAAWa,MAAO,CAAEC,MAAO,YAE7B,4BACE,uBAAGO,KAAK,QAAQrB,UAAU,gBACxB,kBAAC,IAAD,MACA,uBAAGsB,QAAS,SAAAC,GAAC,OAAInB,GAAc,SAAAoB,GAAS,OAAKA,OAA7C,YAMF,kBAAC,EAAD,CAASzB,SAAUI,KAErB,4BACE,uBAAGkB,KAAK,QAAQrB,UAAU,gBACxB,kBAAC,IAAD,MACA,uCAGJ,4BACE,uBAAGqB,KAAK,QAAQrB,UAAU,gBACxB,kBAAC,IAAD,MACA,uBAAGsB,QAAS,SAAAC,GAAC,OAAIjB,GAAe,SAAAkB,GAAS,OAAKA,OAA9C,aAMF,kBAAC,EAAD,CAASzB,SAAUM,KAErB,4BACE,uBAAGgB,KAAK,QAAQrB,UAAU,gBACxB,kBAAC,IAAD,MACA,sCAMN,yBAAKA,UAAU,iBACb,6BACE,0BAAMA,UAAU,gBACd,4BAAQA,UAAU,aAChB,kBAAC,IAAD,OAEF,2BAAOyB,YAAY,YAAYzB,UAAU,gBAI7C,0BAAMA,UAAU,YACd,kBAAC0B,EAAA,EAAD,CACEJ,QA1FE,WACZZ,EAAS,CACPO,KAAM,YAyFEJ,MAAO,CAAEc,SAAU,OAAQC,OAAQ,OAAQd,MAAO,YAEjDP,EAAW,SAAW,c,MCrGtBsB,MAXf,WAEE,IAAMtB,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,YAE5C,OACE,yBAAKP,UAAU,QACb,wCAAcO,EAAW,eAAiB,mBCIjCuB,MATf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRSC,EAVO,WAA4B,IAA3B3B,EAA0B,wDAAX4B,EAAW,uCAC/C,OAAQA,EAAOpB,MACb,IAAK,SACH,OAAQR,EAEV,QACE,OAAOA,ICCE6B,EAJIC,YAAgB,CACjChC,SAAU6B,ICKNI,EAAQC,YACZH,EACAN,OAAOU,8BAAgCV,OAAOU,gCAGhDC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SHiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b1f72be1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Styles/Megabox.css\";\r\n\r\nfunction Megabox({ showMega }) {\r\n  return (\r\n    <div>\r\n      <div className={`mega__box ${showMega ? \"show__mega\" : \"\"}`}>\r\n        <div className=\"content\">\r\n          <div className=\"row\">\r\n            <ul className=\"mega__links\">\r\n              <li>BRIDAL WEAR</li>\r\n              <li>FAMILY WEAR</li>\r\n              <li>GROOM WEAR</li>\r\n              <li>JEWELLERY</li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"row\">\r\n            <ul className=\"mega__links\">\r\n              <li>HAIRSTYLE</li>\r\n              <li>HENNA/MEHANDI</li>\r\n              <li>MAKEUP</li>\r\n              <li>JEWELLERY</li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"row\">\r\n            <ul className=\"mega__links\">\r\n              <li>BRIDAL WEAR</li>\r\n              <li>FAMILY WEAR</li>\r\n              <li>GROOM WEAR</li>\r\n              <li>JEWELLERY</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Megabox;\r\n","import React, { useState } from \"react\";\r\nimport \"../Styles/Header.css\";\r\n// Material UI logos and components\r\nimport StorefrontIcon from \"@material-ui/icons/Storefront\";\r\nimport PhotoSizeSelectActualIcon from \"@material-ui/icons/PhotoSizeSelectActual\";\r\nimport LibraryBooksIcon from \"@material-ui/icons/LibraryBooks\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ReorderIcon from \"@material-ui/icons/Reorder\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Megabox from \"./Megabox\";\r\n// Importing Redux stuffs\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction Header() {\r\n  const [showMegaVendor, setShowVendor] = useState(false);\r\n  const [showMegaWedding, setShowWedding] = useState(false);\r\n\r\n  // Getting the boolean value, whether the user is logged in or not.\r\n  const isLogged = useSelector(state => state.isLogged);\r\n  const dispatch = useDispatch();\r\n\r\n  // Dispatch the type of change we need.\r\n  const login = () => {\r\n    dispatch({\r\n      type: \"LOG_IN\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"header__cont\">\r\n      <div className=\"header\">\r\n        <div>\r\n          <label htmlFor=\"close-btn\" className=\"toggle__btn\">\r\n            <ReorderIcon style={{ color: \"white\" }} />\r\n          </label>\r\n\r\n          <div className=\"header__logo\">\r\n            <img\r\n              src=\"https://wedmeplz.com/wp-content/uploads/2020/04/Wedmeplz-4-e1586872272326.jpg\"\r\n              alt=\"logo\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* To toggle the sidebar */}\r\n        <input\r\n          type=\"radio\"\r\n          name=\"slide\"\r\n          id=\"menu-btn\"\r\n          style={{ display: \"none\" }}\r\n        />\r\n        <input\r\n          type=\"radio\"\r\n          name=\"slide\"\r\n          id=\"close-btn\"\r\n          style={{ display: \"none\" }}\r\n        />\r\n\r\n        {/* All the Links components */}\r\n        <ul className=\"header__icon__cont\">\r\n          <label htmlFor=\"menu-btn\" className=\"close__btn\">\r\n            <CloseIcon style={{ color: \"black\" }} />\r\n          </label>\r\n          <li>\r\n            <a href=\"#home\" className=\"header__icon\">\r\n              <StorefrontIcon />\r\n              <p onClick={e => setShowVendor(prevState => !prevState)}>\r\n                Vendors\r\n              </p>\r\n            </a>\r\n\r\n            {/* The megabox for the drop down */}\r\n            <Megabox showMega={showMegaVendor} />\r\n          </li>\r\n          <li>\r\n            <a href=\"#home\" className=\"header__icon\">\r\n              <PhotoSizeSelectActualIcon />\r\n              <p>Photos</p>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#home\" className=\"header__icon\">\r\n              <StorefrontIcon />\r\n              <p onClick={e => setShowWedding(prevState => !prevState)}>\r\n                Weddings\r\n              </p>\r\n            </a>\r\n\r\n            {/* The megabox for the drop down */}\r\n            <Megabox showMega={showMegaWedding} />\r\n          </li>\r\n          <li>\r\n            <a href=\"#home\" className=\"header__icon\">\r\n              <LibraryBooksIcon />\r\n              <p>Blog</p>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        {/* Search and Login form */}\r\n        <div className=\"header__forms\">\r\n          <div>\r\n            <form className=\"search__form\">\r\n              <button className=\"searchbtn\">\r\n                <SearchIcon />\r\n              </button>\r\n              <input placeholder=\"Search...\" className=\"searchinp\" />\r\n            </form>\r\n          </div>\r\n\r\n          <span className=\"loginbtn\">\r\n            <Button\r\n              onClick={login} //calling the `login` function to login/logout.\r\n              style={{ fontSize: \"12px\", height: \"36px\", color: \"#c7202f\" }}\r\n            >\r\n              {isLogged ? \"LOGOUT\" : \"LOGIN\"}\r\n            </Button>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../Styles/Home.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Home() {\r\n  // Getting the boolean value, whether the user is logged in or not.\r\n  const isLogged = useSelector(state => state.isLogged);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <h2>Your are {isLogged ? \"Logged In :)\" : \"Logged out :|\"}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Home from \"./Components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const loggedReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"LOG_IN\":\r\n      return !state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loggedReducer;\r\n","import loggedReducer from \"./isLogged\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducer = combineReducers({\r\n  isLogged: loggedReducer\r\n});\r\n\r\nexport default allReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport allReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  allReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}